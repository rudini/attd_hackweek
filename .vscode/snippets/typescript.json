{
    "Page_Component": {
        "prefix": "page",
        "body": [
            "import { Store, createFeatureSelector } from '@ngrx/store';",
            "import { Observable } from 'rxjs';",
            "import { unionize } from 'unionize';",
            "import { Component } from '@angular/core';",
            "import { ContainerComponent } from 'src/app/shared/reactive-component';",
            "import { cold } from 'jest-marbles';",
            "",
            "export type ${1:modulename}Store = {",
            "    // TODO: implement store properties",
            "};",
            "",
            "const unionizeActions = <T>(record: T) => unionize(record, 'type', 'payload');",
            "",
            "export const ${1/(.*)/${1:/downcase}/}ActionsRecord = {",
            "    // TODO: define actions",
            "};",
            "",
            "const ${1:modulename}Actions = unionizeActions(${1/(.*)/${1:/downcase}/}ActionsRecord);",
            "",
            "export class MockStore {",
            "    constructor(private selectorMap: { selector: any; value: Observable<any> }[] = []) {}",
            "",
            "    public dispatch(action: any): void {",
            "        console.log('dispatching from the mock store!');",
            "    }",
            "",
            "    public select(selector: any): Observable<any> {",
            "        const found = this.selectorMap.filter(x => x.selector === selector);",
            "        if (found.length !== 0) {",
            "            return found[0].value;",
            "        }",
            "        return cold('a', { a: {} });",
            "    }",
            "}",
            "",
            "export const get${1:modulename}State = createFeatureSelector<${1:modulename}Store>('${1/(.*)/${1:/downcase}/}');",
            "export const ${1/(.*)/${1:/downcase}/}Selectors = {",
            "    // TODO: implement your own selector",
            "};",
            "",
            "describe('${1:modulename} page tests', () => {",
            "    $0",
            "});",
            "",
            "@Component({",
            "    template: ''",
            "})",
            "export class ${1:modulename}PageComponent extends ContainerComponent {",
            "    constructor(private store: Store<any>) {",
            "        super(store.dispatch.bind(store));",
            "    }",
            "}"
        ],
        "description": "This is a snippet to create a page test skeleton to use TDD"
    },
    "page___expect__dispatch_an_action__on_create": {
        "prefix": "page___expect__dispatch_an_action__on_create",
        "body": [
            "it('it should $1', () => {",
            "    // Arrange",
            "    const store: any = new MockStore();",
            "    const spy = jest.spyOn(store, 'dispatch');",
            "",
            "    // Act",
            "    new ${2:modulename}PageComponent(store);",
            "",
            "    // Assert",
            "    expect(spy).toHaveBeenCalledWith(${2:modulename}Actions.${0:actionname}(null));",
            "});"
        ],
        "description": "create a page test to expect dispatch an action on create"
    },
    "page___expect__dispatch_an_action__on_a_event_emitter_change": {
        "prefix": "page___expect__dispatch_an_action__on_a_event_emitter_change",
        "body": [
            "it('it should $1', () => {",
            "    // Arrange",
            "    const store: any = new MockStore();",
            "    const spy = jest.spyOn(store, 'dispatch');",
            "    const page = new ${2:modulename}PageComponent(store);",
            "",
            "    // Act",
            "    page.${3:eventEmitterProperty}Changed$.emit(${4:eventEmitterPayload});",
            "",
            "    // Assert",
            "    expect(spy).toHaveBeenCalledWith(${2:modulename}Actions.${0:actionname}(${4:eventEmitterPayload}));",
            "});"
        ],
        "description": "create a page test to expect dispatch an action on a event emitter change"
    },
    "page___expect__event_change__on_selector_changed": {
        "prefix": "page___expect__event_change__on_selector_changed",
        "body": [
            "it('it should $1', () => {",
            "    // Arrange",
            "    const store: any = new MockStore([{ selector: ${2:modulename}Selectors.get${3:selectorname}, value: cold('a')$0 }]);",
            "    const page = new ${2/(.*)/${1:/capitalize}/}PageComponent(store);",
            "",
            "    // Act and assert",
            "    expect(page.${3/(.*)/${1:/downcase}/}$).toBeMarble('a');",
            "});"
        ],
        "description": "create a page test to expect event change on selector changed "
    }
}
